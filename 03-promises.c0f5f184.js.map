{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","delay","elements","step","amount","refs","timeoutID","createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","onInput","e","target","name","value","console","log","createDelay","data","i","total","Number","push","onSubmit","preventDefault","forEach","currentValue","index","then","onSuccess","catch","onError","clearTimeout","result","error","addEventListener"],"mappings":";AAAAA,KAAOC,SAASC,cAAc,QAC9BC,MAAQH,KAAKI,SAASD,MACtBE,KAAOL,KAAKI,SAASC,KACrBC,OAASN,KAAKI,SAASE,OACvBC,KAAO,CACLP,KAAAA,KACAG,MAAAA,MACAE,KAAAA,KACAC,OAAAA,QAGF,IAAIE,EAAY,KAEhB,SAASC,EAAcC,EAAUP,GACxB,OAAA,IAAIQ,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACpBC,WAAW,KACvBH,GACFF,yBAA+BF,EAAW,QAAQP,OAGpDU,wBAA6BH,EAAW,QAAQP,QAC/CA,KAIP,SAASe,EAAQC,GACfZ,KAAKY,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,MAC/BC,QAAQC,IAAIjB,MAGd,SAASkB,EAAYnB,EAAQH,EAAOE,GAClCqB,KAAO,GACF,IAAA,IAAIC,EAAI,EAAGA,EAAIrB,EAAQqB,GAAK,EAAG,CAG5BC,MAAAA,GAFNzB,EAAQ0B,OAAO1B,IAEOwB,GADtBtB,EAAOwB,OAAOxB,IAGdqB,KAAKI,KAAKF,IAId,SAASG,EAASZ,GAChBA,EAAEa,iBACFP,EAAYlB,KAAKD,OAAQC,KAAKJ,MAAOI,KAAKF,MAC1CqB,KAAKO,QAAQ,CAACC,EAAcC,KAC1B1B,EAAc0B,EAAOD,GAAcE,KAAKC,GAAWC,MAAMC,KAE3Db,KAAO,GACPc,aAAahC,GAGf,SAAS6B,EAAUI,GACjBlB,QAAQC,IAAIiB,GAGd,SAASF,EAAQG,GACfnB,QAAQC,IAAIkB,GAGd1C,KAAK2C,iBAAiB,QAASzB,GAC/BlB,KAAK2C,iBAAiB,SAAUZ","file":"03-promises.c0f5f184.js","sourceRoot":"../src","sourcesContent":["form = document.querySelector('form');\ndelay = form.elements.delay;\nstep = form.elements.step;\namount = form.elements.amount;\nrefs = {\n  form,\n  delay,\n  step,\n  amount,\n};\n\nlet timeoutID = null;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    const timeoutID = setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n      }\n\n      reject(`❌ Rejected promise ${position + 1} in ${delay}ms`);\n    }, delay);\n  });\n}\n\nfunction onInput(e) {\n  refs[e.target.name] = e.target.value;\n  console.log(refs);\n}\n\nfunction createDelay(amount, delay, step) {\n  data = [];\n  for (let i = 0; i < amount; i += 1) {\n    delay = Number(delay);\n    step = Number(step);\n    const total = delay + i * step;\n\n    data.push(total);\n  }\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  createDelay(refs.amount, refs.delay, refs.step);\n  data.forEach((currentValue, index) => {\n    createPromise(index, currentValue).then(onSuccess).catch(onError);\n  });\n  data = [];\n  clearTimeout(timeoutID);\n}\n\nfunction onSuccess(result) {\n  console.log(result);\n}\n\nfunction onError(error) {\n  console.log(error);\n}\n\nform.addEventListener('input', onInput);\nform.addEventListener('submit', onSubmit);\n"]}